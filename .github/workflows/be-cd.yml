# This is a basic workflow to help you get started with Actions

name: CD
# Add permissions for workflow
permissions:
  id-token: write
  contents: read
  pull-requests: read

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches:
      - 'main'
    paths:
      - '.github/workflows/build.yml'
      - '.github/workflows/be-cd.yml'
      - 'admin-proxy/**'
      - 'maker-checker/**'
      - 'points-ledger/**'
      - 'logging/**'
      - 'User/**'
  workflow_dispatch:

jobs:
  # This workflow contains a single job called "build"
  filechange:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    outputs:
      files: ${{ steps.file_changes.outputs.files }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      - id: file_changes
        name: File Changes
        uses: trilom/file-changes-action@v1.2.4
        
      - id: file_changes_output
        name: Ouput File Changes
        run: echo '${{ steps.file_changes.outputs.files }}'
  
  deploy-admin-proxy:
    needs: filechange
    if: contains(needs.filechange.outputs.files , 'admin-proxy/')
    uses: ./.github/workflows/build.yml
    with:
      dockerfile: 'Dockerfile'
      workdir: 'admin-proxy'
      repository: 'admin-proxy'
      ecs_service: 'admin-proxy'
      ecs_cluster: 'be-cluster'
      ecs_task_definition: './.infra/ecs/adminProxyTaskDefinition.json'
      container_name: 'admin-proxy'
      execution_role_arn: ${{ github.secrets.ECS_EXECUTION_ROLE_ARN || 'test' }}

  deploy-logging:
    needs: filechange
    if: contains(needs.filechange.outputs.files , 'logging/')
    uses: ./.github/workflows/build.yml
    with:
      dockerfile: 'Dockerfile'
      workdir: 'logging'
      repository: 'logging'
      ecs_service: 'logging'
      ecs_cluster: 'be-cluster'
      ecs_task_definition: './.infra/ecs/loggingServiceTaskDefinition.json'
      container_name: 'logging'
      execution_role_arn: ${{ github.secrets.ECS_EXECUTION_ROLE_ARN || 'test'}}
  
  deploy-maker-checker:
    needs: filechange
    if: contains(needs.filechange.outputs.files , 'maker-checker/')
    uses: ./.github/workflows/build.yml
    with:
      dockerfile: 'makerchecker.Dockerfile'
      workdir: 'maker-checker'
      repository: 'maker-checker'
      ecs_service: 'maker-checker'
      ecs_cluster: 'be-cluster'
      ecs_task_definition: './.infra/ecs/makerCheckerTaskDefinition.json'
      container_name: 'maker-checker'
      execution_role_arn: ${{ github.secrets.ECS_EXECUTION_ROLE_ARN || 'test'}}
  
  deploy-points:
    needs: filechange
    if: contains(needs.filechange.outputs.files , 'points-ledger/')
    uses: ./.github/workflows/build.yml
    with:
      dockerfile: 'Dockerfile'
      workdir: 'points-ledger'
      repository: 'points'
      ecs_service: 'points'
      ecs_cluster: 'be-cluster'
      ecs_task_definition: './.infra/ecs/pointsLedgerTaskDefinition.json'
      container_name: 'points'
      execution_role_arn: ${{ github.secrets.ECS_EXECUTION_ROLE_ARN || 'test'}}

  deploy-user:
    needs: filechange
    if: contains(needs.filechange.outputs.files , 'User/')
    uses: ./.github/workflows/build.yml
    with:
      dockerfile: 'Dockerfile'
      workdir: 'User'
      repository: 'user'
      ecs_service: 'user'
      ecs_cluster: 'be-cluster'
      ecs_task_definition: './.infra/ecs/userTaskDefinition.json'
      container_name: 'user'
      execution_role_arn: ${{ github.secrets.ECS_EXECUTION_ROLE_ARN || 'test'}}
